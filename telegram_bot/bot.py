import telebot
from telebot import types
import requests
import json
from datetime import datetime

TOKEN = '6897033821:AAE80aF2-Kvn3dF8CSHH_PPMDoyulJMiLoo'
BASE_URL = 'http://schedule.kafit.ru/api'  # URL –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}


@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
    btn2 = types.KeyboardButton("üîç –°–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
    markup.add(btn1, btn2)

    bot.reply_to(message,
                 f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
                 f"–Ø –ø–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π.",
                 reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
def ask_group(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å —Å–∞–π—Ç–∞
        response = requests.get(f"{BASE_URL}/groups")
        groups = response.json()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in range(0, len(groups), 2):
            row = [types.KeyboardButton(groups[i])]
            if i + 1 < len(groups):
                row.append(types.KeyboardButton(groups[i + 1]))
            markup.row(*row)
        markup.row(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))

        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=markup)
        user_states[message.chat.id] = 'waiting_for_group'
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {str(e)}")


@bot.message_handler(func=lambda message: message.text == "üîç –°–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
def free_rooms_handler(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]
    for i in range(0, len(days), 2):
        markup.row(
            types.KeyboardButton(days[i]),
            types.KeyboardButton(days[i + 1] if i + 1 < len(days) else "")
        )
    markup.row(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))

    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=markup)
    user_states[message.chat.id] = 'waiting_for_room_day'


def format_schedule(schedule_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not schedule_data or 'days' not in schedule_data:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    result = []
    day_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']

    for day in schedule_data['days']:
        day_name = day_names[day['weekday'] - 1]
        result.append(f"\nüìÖ {day_name}")

        if not day.get('lessons'):
            result.append("–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π")
            continue

        for lesson in sorted(day['lessons'], key=lambda x: x['time']):
            time_slots = [
                "8:00-9:20", "9:30-10:50", "11:00-12:20",
                "12:40-14:00", "14:10-15:30", "15:40-17:00",
                "17:10-18:30", "18:40-20:00"
            ]
            time = time_slots[lesson['time'] - 1]

            result.append(f"\n‚è∞ {time}")
            result.append(f"üìö {lesson['subject']}")
            result.append(f"üéì {lesson['type']}")

            if lesson.get('subgroup'):
                result.append(f"üë• –ü–æ–¥–≥—Ä—É–ø–ø–∞ {lesson['subgroup']}")

            if lesson.get('teachers'):
                teachers = ", ".join(t['teacher_name'] for t in lesson['teachers'])
                result.append(f"üë®‚Äçüè´ {teachers}")

            if lesson.get('auditories'):
                auditories = ", ".join(a['auditory_name'] for a in lesson['auditories'])
                result.append(f"üö™ {auditories}")

            result.append("")

    return "\n".join(result)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    text = message.text

    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        send_welcome(message)
        user_states.pop(chat_id, None)
        return

    state = user_states.get(chat_id)

    if state == 'waiting_for_group':
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            response = requests.get(f"{BASE_URL}/schedule/{text}")
            schedule_data = response.json()

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            formatted_schedule = format_schedule(schedule_data)
            bot.reply_to(message, formatted_schedule)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            send_welcome(message)
            user_states.pop(chat_id, None)
        except Exception as e:
            bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

    elif state == 'waiting_for_room_day':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è
        user_states[f'{chat_id}_day'] = text

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        times = ["8:00-9:20", "9:30-10:50", "11:00-12:20", "12:40-14:00",
                 "14:10-15:30", "15:40-17:00", "17:10-18:30", "18:40-20:00"]

        for i in range(0, len(times), 2):
            markup.row(
                types.KeyboardButton(times[i]),
                types.KeyboardButton(times[i + 1] if i + 1 < len(times) else "")
            )
        markup.row(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))

        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=markup)
        user_states[chat_id] = 'waiting_for_room_time'

    elif state == 'waiting_for_room_time':
        try:
            day = user_states.get(f'{chat_id}_day')
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
            response = requests.get(
                f"{BASE_URL}/free-rooms",
                params={'day': day, 'time': text}
            )
            free_rooms = response.json()

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = f"–°–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ {day}, {text}:\n\n"
            result += "\n".join(free_rooms) if free_rooms else "–°–≤–æ–±–æ–¥–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π –Ω–µ—Ç"

            bot.reply_to(message, result)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            send_welcome(message)
            user_states.pop(chat_id, None)
            user_states.pop(f'{chat_id}_day', None)
        except Exception as e:
            bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—É–¥–∏—Ç–æ—Ä–∏–π: {str(e)}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.infinity_polling()