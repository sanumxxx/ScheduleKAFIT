# utils/telegram_notifier.py
from flask import request, current_app
from functools import wraps
from datetime import datetime
import requests
import socket
import netifaces


def get_real_ip():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        interfaces = netifaces.interfaces()

        for interface in interfaces:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º loopback
            if interface.startswith('lo'):
                continue

            addrs = netifaces.ifaddresses(interface)
            # –ò—â–µ–º IPv4 –∞–¥—Ä–µ—Å–∞
            if netifaces.AF_INET in addrs:
                for addr in addrs[netifaces.AF_INET]:
                    ip = addr['addr']
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
                    if not ip.startswith('127.'):
                        if request.environ.get('REMOTE_PORT'):
                            return f"{ip}:{request.environ.get('REMOTE_PORT')}"
                        return ip
    except:
        pass

    # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –ø–æ–ª—É—á–∞–µ–º IP —á–µ—Ä–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(('8.8.8.8', 80))
        ip = s.getsockname()[0]
        s.close()
        if request.environ.get('REMOTE_PORT'):
            return f"{ip}:{request.environ.get('REMOTE_PORT')}"
        return ip
    except:
        pass

    return request.remote_addr


def get_browser_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ"""
    user_agent = request.headers.get('User-Agent', '').lower()
    browser = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    system = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    if 'edge' in user_agent:
        browser = "Edge"
    elif 'chrome' in user_agent:
        browser = "Chrome"
    elif 'firefox' in user_agent:
        browser = "Firefox"
    elif 'safari' in user_agent:
        browser = "Safari"
    elif 'opera' in user_agent:
        browser = "Opera"

    if 'windows' in user_agent:
        system = "Windows"
    elif 'android' in user_agent:
        system = "Android"
    elif 'iphone' in user_agent or 'ipad' in user_agent:
        system = "iOS"
    elif 'linux' in user_agent:
        system = "Linux"
    elif 'macintosh' in user_agent:
        system = "MacOS"

    return browser, system


def send_notification(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    try:
        bot_token = "7938737812:AAFiJZLaiImXRICS53p4TKcvNepP6vpnwSs"
        api_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            "chat_id": "-1002375937245",
            "text": message,
            "parse_mode": "HTML"
        }
        response = requests.post(api_url, data=data)

        if not response.ok:
            print(f"Telegram API error: {response.text}")
            return False

        return True
    except Exception as e:
        print(f"Error sending Telegram notification: {e}")
        return False


def notify_view(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    @wraps(f)
    def decorated_function(*args, **kwargs):
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            path = request.path
            client_ip = get_real_ip()
            browser, system = get_browser_info()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –¥–µ—Ç–∞–ª–∏
            view_type = "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
            details = ""

            if 'group' in path:
                group_name = kwargs.get('group_name', '')
                view_type = f"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"
                details = f"–ì—Ä—É–ø–ø–∞: <b>{group_name}</b>"
            elif 'teacher' in path:
                teacher_name = kwargs.get('teacher_name', '')
                view_type = f"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
                details = f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: <b>{teacher_name}</b>"
            elif 'room' in path:
                room_name = kwargs.get('room_name', '')
                view_type = f"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏"
                details = f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>{room_name}</b>"
            elif 'free_rooms' in path:
                view_type = "—Å–ø–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π"

            week = request.args.get('week', '—Ç–µ–∫—É—â–∞—è')
            endpoint = request.endpoint if request.endpoint else 'Unknown'

            message = (
                f"üëÄ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä {view_type}</b>\n\n"
                f"üïí –í—Ä–µ–º—è: {timestamp}\n"
                f"üåê IP –∫–ª–∏–µ–Ω—Ç–∞: {client_ip}\n"
                f"üíª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {system}\n"
                f"üåç –ë—Ä–∞—É–∑–µ—Ä: {browser}\n"
                f"üîó –°—Ç—Ä–∞–Ω–∏—Ü–∞: {endpoint}\n"
                f"üìÖ –ù–µ–¥–µ–ª—è: {week}\n"
            )

            if details:
                message += f"{details}\n"

            send_notification(message)

        except Exception as e:
            print(f"Error in notification wrapper: {e}")

        return f(*args, **kwargs)

    return decorated_function