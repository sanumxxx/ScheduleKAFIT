# utils/telegram_notifier.py
from flask import request, current_app
from functools import wraps
from datetime import datetime
import requests


def get_client_ip():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ nginx"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    forwarded_for = request.headers.get('X-Forwarded-For')
    if forwarded_for:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π IP –∏–∑ —Å–ø–∏—Å–∫–∞ (—Ä–µ–∞–ª—å–Ω—ã–π IP –∫–ª–∏–µ–Ω—Ç–∞)
        return forwarded_for.split(',')[0].strip()

    real_ip = request.headers.get('X-Real-IP')
    if real_ip:
        return real_ip

    return request.remote_addr


def get_browser_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ"""
    user_agent = request.headers.get('User-Agent', '').lower()
    browser = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    system = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    if 'edge' in user_agent:
        browser = "Edge"
    elif 'chrome' in user_agent:
        browser = "Chrome"
    elif 'firefox' in user_agent:
        browser = "Firefox"
    elif 'safari' in user_agent:
        browser = "Safari"
    elif 'opera' in user_agent:
        browser = "Opera"

    if 'windows' in user_agent:
        system = "Windows"
    elif 'android' in user_agent:
        system = "Android"
    elif 'iphone' in user_agent or 'ipad' in user_agent:
        system = "iOS"
    elif 'linux' in user_agent:
        system = "Linux"
    elif 'macintosh' in user_agent:
        system = "MacOS"

    return browser, system


def format_lesson_info(lesson):
    """–ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–µ"""
    return {
        'subject': lesson.get('subject', ''),
        'teacher': lesson.get('teachers', [{}])[0].get('teacher_name', ''),
        'room': lesson.get('auditories', [{}])[0].get('auditory_name', ''),
        'type': lesson.get('type', ''),
        'subgroup': lesson.get('subgroup', 0)
    }


def send_notification(message, theme=None):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–µ–º—ã
    theme: 'changes' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, 'visits' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    """
    try:
        bot_token = "7938737812:AAFiJZLaiImXRICS53p4TKcvNepP6vpnwSs"
        api_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"

        # ID —Ç–µ–º –≤ Telegram
        themes = {
            'changes': 321,  # ID —Ç–µ–º—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            'visits': 323  # ID —Ç–µ–º—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        }

        data = {
            "chat_id": "-1002375937245",
            "text": message,
            "parse_mode": "HTML"
        }

        # –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–µ–º—ã, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
        if theme and theme in themes:
            data["message_thread_id"] = themes[theme]

        response = requests.post(api_url, data=data)

        if not response.ok:
            print(f"Telegram API error: {response.text}")
            return False

        return True
    except Exception as e:
        print(f"Error sending Telegram notification: {e}")
        return False


def notify_view(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö"""

    @wraps(f)
    def decorated_function(*args, **kwargs):
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            path = request.path
            client_ip = get_client_ip()
            browser, system = get_browser_info()
            referer = request.headers.get('Referer', '–ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥')
            host = request.headers.get('Host', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ö–æ—Å—Ç')

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –¥–µ—Ç–∞–ª–∏
            view_type = "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
            details = ""
            emoji = "üëÄ"

            if 'teacher' in path:
                teacher_name = kwargs.get('teacher_name', '')
                view_type = f"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
                details = (
                    f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: <b>{teacher_name}</b>\n"
                    f"üîç URL: {host}{path}\n"
                    f"‚Ü©Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞: {referer}"
                )
                emoji = "üë®‚Äçüè´"
            elif 'group' in path:
                group_name = kwargs.get('group_name', '')
                view_type = f"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"
                details = f"–ì—Ä—É–ø–ø–∞: <b>{group_name}</b>"
                emoji = "üë•"
            elif 'room' in path:
                room_name = kwargs.get('room_name', '')
                view_type = f"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏"
                details = f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>{room_name}</b>"
                emoji = "üö™"
            elif 'free_rooms' in path:
                view_type = "—Å–ø–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π"
                emoji = "üîç"

            week = request.args.get('week', '—Ç–µ–∫—É—â–∞—è')

            message = (
                f"{emoji} <b>–ü—Ä–æ—Å–º–æ—Ç—Ä {view_type}</b>\n\n"
                f"üïí –í—Ä–µ–º—è: {timestamp}\n"
                f"üåê IP: {client_ip}\n"
                f"üíª –û–°: {system}\n"
                f"üåç –ë—Ä–∞—É–∑–µ—Ä: {browser}\n"
                f"üìÖ –ù–µ–¥–µ–ª—è: {week}\n"
            )

            if details:
                message += f"\n{details}\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            send_notification(message, theme='visits')

        except Exception as e:
            print(f"Error in notification wrapper: {e}")
            import traceback
            print(traceback.format_exc())

        return f(*args, **kwargs)

    return decorated_function


def send_lesson_change_notification(action, group_name, weekday, time_slot, week_number, lesson_data,
                                    old_lesson_data=None, editor_ip=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±']
    day_name = days[weekday - 1] if 0 < weekday <= len(days) else f"–î–µ–Ω—å {weekday}"

    week_str = f"–ù–µ–¥–µ–ª—è {week_number}" if week_number else "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è"

    time_slots = [
        '08:00-09:20', '09:30-10:50', '11:00-12:20', '12:40-14:00',
        '14:10-15:30', '15:40-17:00', '17:10-18:30', '18:40-20:00'
    ]
    time_str = time_slots[time_slot - 1] if isinstance(time_slot, int) and 0 < time_slot <= len(time_slots) else str(
        time_slot)

    if action == 'create':
        info = format_lesson_info(lesson_data)
        message = (
            f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä–∞</b>\n\n"
            f"üìÖ {week_str}\n"
            f"üë• –ì—Ä—É–ø–ø–∞: {group_name}\n"
            f"üìç {day_name}, {time_str}\n\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {info['subject']}\n"
            f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {info['teacher']}\n"
            f"üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {info['room']}\n"
            f"üìù –¢–∏–ø: {info['type']}"
        )
        if info['subgroup']:
            message += f"\nüë• –ü–æ–¥–≥—Ä—É–ø–ø–∞: {info['subgroup']}"

    elif action == 'update':
        old = format_lesson_info(old_lesson_data)
        new = format_lesson_info(lesson_data)

        message = (
            f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∞ –ø–∞—Ä–∞</b>\n\n"
            f"üìÖ {week_str}\n"
            f"üë• –ì—Ä—É–ø–ø–∞: {group_name}\n"
            f"üìç {day_name}, {time_str}\n\n"
        )

        if old['subject'] != new['subject']:
            message += f"üìö –ü—Ä–µ–¥–º–µ—Ç: {old['subject']} ‚ûú {new['subject']}\n"
        if old['teacher'] != new['teacher']:
            message += f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {old['teacher']} ‚ûú {new['teacher']}\n"
        if old['room'] != new['room']:
            message += f"üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {old['room']} ‚ûú {new['room']}\n"
        if old['type'] != new['type']:
            message += f"üìù –¢–∏–ø: {old['type']} ‚ûú {new['type']}\n"
        if old['subgroup'] != new['subgroup']:
            message += f"üë• –ü–æ–¥–≥—Ä—É–ø–ø–∞: {old['subgroup'] or '–æ–±—â–∞—è'} ‚ûú {new['subgroup'] or '–æ–±—â–∞—è'}"

    elif action == 'delete':
        info = format_lesson_info(lesson_data)
        message = (
            f"‚ùå <b>–£–¥–∞–ª–µ–Ω–∞ –ø–∞—Ä–∞</b>\n\n"
            f"üìÖ {week_str}\n"
            f"üë• –ì—Ä—É–ø–ø–∞: {group_name}\n"
            f"üìç {day_name}, {time_str}\n\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {info['subject']}\n"
            f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {info['teacher']}\n"
            f"üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {info['room']}\n"
            f"üìù –¢–∏–ø: {info['type']}"
        )
        if info['subgroup']:
            message += f"\nüë• –ü–æ–¥–≥—Ä—É–ø–ø–∞: {info['subgroup']}"

    if editor_ip:
        message += f"\n\nüåê IP —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: {editor_ip}"
    message += f"\nüïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–º—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
    return send_notification(message, theme='changes')

def notify_lesson_change(action='update'):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            try:
                data = request.get_json()
                if not data:
                    return f(*args, **kwargs)

                group_name = data.get('group_name')
                day = data.get('day')
                time = data.get('time')
                week = data.get('week')
                lessons = data.get('lessons', [])
                old_lessons = data.get('old_lessons', [])

                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
                time_slots = [
                    '08:00', '09:30', '11:00',
                    '12:40', '14:10', '15:40',
                    '17:10', '18:40'
                ]
                time_slot = time_slots[time - 1] if 0 < time <= len(time_slots) else f"–ü–∞—Ä–∞ {time}"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
                if not old_lessons and lessons:
                    action = 'create'
                elif not lessons and old_lessons:
                    action = 'delete'
                else:
                    action = 'update'

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                for i, lesson in enumerate(lessons or old_lessons):
                    old_lesson = old_lessons[i] if i < len(old_lessons) and action == 'update' else None
                    send_lesson_change_notification(
                        action=action,
                        group_name=group_name,
                        weekday=day,
                        time_slot=time_slot,
                        week_number=week,
                        lesson_data=lesson,
                        old_lesson_data=old_lesson,
                        editor_ip=get_client_ip()
                    )

            except Exception as e:
                print(f"Error in notification wrapper: {e}")

            return f(*args, **kwargs)
        return decorated_function
    return decorator