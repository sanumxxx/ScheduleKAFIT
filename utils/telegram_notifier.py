# utils/telegram_notifier.py
from flask import request, current_app
from functools import wraps
from datetime import datetime
import requests


def get_client_ip():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ nginx"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    forwarded_for = request.headers.get('X-Forwarded-For')
    if forwarded_for:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π IP –∏–∑ —Å–ø–∏—Å–∫–∞ (—Ä–µ–∞–ª—å–Ω—ã–π IP –∫–ª–∏–µ–Ω—Ç–∞)
        return forwarded_for.split(',')[0].strip()

    real_ip = request.headers.get('X-Real-IP')
    if real_ip:
        return real_ip

    return request.remote_addr


def get_browser_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ"""
    user_agent = request.headers.get('User-Agent', '').lower()
    browser = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    system = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    if 'edge' in user_agent:
        browser = "Edge"
    elif 'chrome' in user_agent:
        browser = "Chrome"
    elif 'firefox' in user_agent:
        browser = "Firefox"
    elif 'safari' in user_agent:
        browser = "Safari"
    elif 'opera' in user_agent:
        browser = "Opera"

    if 'windows' in user_agent:
        system = "Windows"
    elif 'android' in user_agent:
        system = "Android"
    elif 'iphone' in user_agent or 'ipad' in user_agent:
        system = "iOS"
    elif 'linux' in user_agent:
        system = "Linux"
    elif 'macintosh' in user_agent:
        system = "MacOS"

    return browser, system


def send_notification(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    try:
        bot_token = "7938737812:AAFiJZLaiImXRICS53p4TKcvNepP6vpnwSs"
        api_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            "chat_id": "-1002375937245",
            "text": message,
            "parse_mode": "HTML"
        }
        response = requests.post(api_url, data=data)

        if not response.ok:
            print(f"Telegram API error: {response.text}")
            return False

        return True
    except Exception as e:
        print(f"Error sending Telegram notification: {e}")
        return False


def notify_view(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            path = request.path
            client_ip = get_client_ip()
            browser, system = get_browser_info()
            referer = request.headers.get('Referer', '–ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥')
            host = request.headers.get('Host', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ö–æ—Å—Ç')

            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            print(f"\nDEBUG: Processing notification")
            print(f"Path: {path}")
            print(f"Args: {args}")
            print(f"Kwargs: {kwargs}")
            print(f"Headers: {dict(request.headers)}\n")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –¥–µ—Ç–∞–ª–∏
            view_type = "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
            details = ""
            emoji = "üëÄ"

            if 'teacher' in path:
                teacher_name = kwargs.get('teacher_name', '')
                view_type = f"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
                details = (
                    f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: <b>{teacher_name}</b>\n"
                    f"üîç URL: {host}{path}\n"
                    f"‚Ü©Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞: {referer}"
                )
                emoji = "üë®‚Äçüè´"
                print(f"DEBUG: Teacher view detected - {teacher_name}")
            elif 'group' in path:
                group_name = kwargs.get('group_name', '')
                view_type = f"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"
                details = f"–ì—Ä—É–ø–ø–∞: <b>{group_name}</b>"
                emoji = "üë•"
            elif 'room' in path:
                room_name = kwargs.get('room_name', '')
                view_type = f"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏"
                details = f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>{room_name}</b>"
                emoji = "üö™"
            elif 'free_rooms' in path:
                view_type = "—Å–ø–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π"
                emoji = "üîç"

            week = request.args.get('week', '—Ç–µ–∫—É—â–∞—è')

            message = (
                f"{emoji} <b>–ü—Ä–æ—Å–º–æ—Ç—Ä {view_type}</b>\n\n"
                f"üïí –í—Ä–µ–º—è: {timestamp}\n"
                f"üåê IP: {client_ip}\n"
                f"üíª –û–°: {system}\n"
                f"üåç –ë—Ä–∞—É–∑–µ—Ä: {browser}\n"
                f"üìÖ –ù–µ–¥–µ–ª—è: {week}\n"
            )

            if details:
                message += f"\n{details}\n"

            print(f"DEBUG: Sending message:\n{message}")
            send_success = send_notification(message)
            print(f"DEBUG: Message sent successfully: {send_success}")

        except Exception as e:
            print(f"Error in notification wrapper: {e}")
            import traceback
            print(traceback.format_exc())

        return f(*args, **kwargs)

    return decorated_function